drop database if exists vk;
create database vk;
use vk;


drop table if exists users;

create table users (
    id BIGINT UNSIGNED not null auto_increment primary key,
    firstname varchar(50),
    lastname varchar(50) comment 'Фамилия',
    email varchar(50) unique,
    password_hash varchar(100),
    phone BIGINT unsigned unique,
    
    index users_firstname_lastname_idx (firstname, lastname)
);


create table profiles(
    user_id BIGINT UNSIGNED not null,
    gender char(1),
    birthday date,
    photo_id BIGINT UNSIGNED not null,
    created_at date default now(),
    hometown varchar (100)
);

alter table profiles add constraint fk_user_id
foreign key (user_id) references user(id)
on update cascade
on delete restrict;

drop table if exists massages;

create table massages;

create table masseges(
    id SERIAL, 
    from_user_id BIGINT UNSIGNED not null,
    to_user_id BIGINT UNSIGNED not null,
    body TEXT,
    created_at datetime default now(),
    
    foreign key (from_user_id) references users(id),
    foreign key (to_user_id) references users(id)
);

drop table if exists friends_requests;

create table friends_requests(
    initiator_user_id BIGINT UNSIGNED not null,
    target_user_id BIGINT UNSIGNED not null,
    `ststus` enum('requested', 'approved', 'declined', 'unfriended'),
    requested_at datetime default now(),
    updated_at datetime on update current_timestamp
    
    
    primary key (initiator_user_id, target_user_id),
    foreign key (initiator_user_id) references users(id),
    foreign key (target_user_id) references users(id)
);
alter table friends_requests
add check (initiator_user_id <> target_user_id);


drop table if exists communities;

create table communities(
    id SERIAL,
    name varchar(150),
    admin_user_id BIGINT UNSIGNED not null,
    
    index communities_name_idx(name),
    foreign key (admin_user_id) references users(id)
);


drop table if exists user_communities;

create table user_communities(
    user_id BIGINT UNSIGNED not null,
    community_id BIGINT UNSIGNED not null,
    
    primary key (user_id, community_id),
    foreign key (user_id) references users(id),
    foreign key (community_id) references communities(id)
);


drop table if exists media_types;

create table media_types(
	id serial,
	name varchar(255),
	created_atdatetime default now(),
    updated_at datetime on update current_timestamp
);

drop table if exists media;

create table media(
	id serial,
	media_type_id BIGINT UNSIGNED not null,
	user_id BIGINT UNSIGNED not null,
	body text,
	filename varchar(255),
	`size` int,
	metadate json,
	created_at datetime default now(),
    updated_at datetime on update current_timestamp,
    
    
    foreign key (user_id) references users(id),
    foreign key (media_type_id) references media_types_id(id)
);

drop table if exists likes;

create table likes(
	id serial,
	user_id BIGINT UNSIGNED not null,
	media_id BIGINT UNSIGNED not null,
	created_at datetime default now()
);

drop table if exists photo_albums;

create table photo_albums(
	id serial,
	name varchar(100),
	user_id BIGINT UNSIGNED not null,
	
	foreign key (user_id) references users(id),
	primary key (id)
);


drop table if exists photos;

create table photos(
	id serial,
	album_id BIGINT UNSIGNED not null,
	media_id BIGINT UNSIGNED not null,
	
	foreign key (album_id) references photo_albums(id),
	foreign key (media_id) references media(id)
);

drop table if exists video_albums;

create table video_albums(
	id serial,
	name varchar(100) comment 'Название видеоальбома',
	user_id BIGINT UNSIGNED not null,
	
	foreign key (user_id) references users(id),
	primary key (id)
);


drop table if exists videos;

create table videos(
	id serial,
	album_id BIGINT UNSIGNED not null,
	media_id BIGINT UNSIGNED not null,
	
	foreign key (album_id) references video_albums(id),
	foreign key (media_id) references media(id)
);
